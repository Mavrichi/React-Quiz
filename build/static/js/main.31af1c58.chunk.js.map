{"version":3,"sources":["components/Questionaire.js","components/GameContext.js","components/GameLogic.js","components/GameForm.js","App.js","index.js"],"names":["Questionaire","handleAnswer","showAnswers","handleNextQuestion","data","question","correct_answer","answers","className","dangerouslySetInnerHTML","__html","map","answer","idx","textColor","onClick","GameContext","createContext","GameProvider","props","useState","url","Url","setUrl","Provider","value","children","GameLogic","useContext","questions","setQuestions","currentIndex","setCurrentIndex","score","setScore","setShowAnswers","console","log","useEffect","fetch","then","res","json","results","incorrect_answers","sort","Math","random","length","GameForm","numberOfQuestions","setNumberOfQuestions","category","setCategory","dificulty","setDificulty","setCompleted","for","type","id","name","onChange","e","target","preventDefault","App","state","start","buttonText","this","mainSwitch","setState","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31af1c58.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// const Button = ({answer, className}) => (\r\n//     // <button className={`bg-white p-4 text-purple-800 font-semibold rounded shadow mb-4 ${className}`}>\r\n//     //     {answer}\r\n//     // </button>\r\n\r\n// );\r\n\r\nconst Questionaire = ({\r\n  handleAnswer,\r\n  showAnswers,\r\n  handleNextQuestion,\r\n  data: { question, correct_answer, answers },\r\n}) => {\r\n  return (\r\n    <div className=\"flex flex-col\">\r\n      <div\r\n        className=\"bg-white text-purple-800 p-10\r\n        rounded-lg shadow-md\"\r\n      >\r\n        <h2\r\n          className=\"text-2xl\"\r\n          dangerouslySetInnerHTML={{ __html: question }}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-2 gap-6 mt-6\">\r\n        {answers.map((answer, idx) => {\r\n          const textColor = showAnswers\r\n            ? answer === correct_answer\r\n              ? \"text-green-500\"\r\n              : \"text-red-500\"\r\n            : \"text-purple-900\";\r\n\r\n          return (\r\n            <button\r\n              key={idx}\r\n              className={` bg-white p-4 ${textColor} font-semibold rounded shadow mb-4`}\r\n              onClick={() => handleAnswer(answer)}\r\n              dangerouslySetInnerHTML={{ __html: answer }}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      {showAnswers && (\r\n        <button\r\n          onClick={handleNextQuestion}\r\n          className={`ml-auto bg-purple-700 text-white p-4 \r\n            font-semibold rounded shadow `}\r\n        >\r\n          Next Question\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n// function everydayImShuffling(arr){\r\n//     for(let i=0; i<100; i++){\r\n//         const aux1 = Math.floor(Math.random() * arr.length);\r\n//         const aux2 = Math.floor(Math.random() * arr.length);\r\n\r\n//     }\r\n// }\r\nexport default Questionaire;\r\n","import React, { useState, createContext } from \"react\";\r\n\r\nexport const GameContext = createContext();\r\n\r\nexport const GameProvider = (props) => {\r\n  const [Url, setUrl] = useState({\r\n    url: \"\",\r\n  });\r\n  return (\r\n    <GameContext.Provider value={[Url, setUrl]}>\r\n      {props.children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport Questionaire from \"./Questionaire\";\r\n//import GameForm from './GameForm';\r\nimport { GameContext } from \"./GameContext\";\r\n\r\nconst GameLogic = () => {\r\n  const [url, setUrl] = useContext(GameContext);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [showAnswers, setShowAnswers] = useState(false);\r\n  console.log(\"string gol\", url);\r\n\r\n  // const API_URL ='https://opentdb.com/api.php?amount=10&category=18&difficulty=easy&type=multiple';\r\n\r\n  useEffect(() => {\r\n    // if ({numberOfQuestions} > 0 ){\r\n    fetch(url.url)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        const questions = data.results.map((question) => ({\r\n          ...question,\r\n          answers: [\r\n            question.correct_answer,\r\n            ...question.incorrect_answers,\r\n          ].sort(() => Math.random() - 0.5),\r\n        }));\r\n        setQuestions(questions);\r\n      });\r\n    //}\r\n  }, []);\r\n  //}\r\n\r\n  const handleAnswer = (answer) => {\r\n    if (!showAnswers) {\r\n      //prevent double answers\r\n      if (answer === questions[currentIndex].correct_answer) {\r\n        setScore(score + 1);\r\n      }\r\n    }\r\n    setShowAnswers(true);\r\n\r\n    // const newIndex = currentIndex + 1;\r\n    // setCurrentIndex(currentIndex +1);\r\n    // if(newIndex >= questions.length)\r\n    // {\r\n    // setGameEnded(true);\r\n    // }\r\n  };\r\n  // currentIndex >= questions.length ? (\r\n  const handleNextQuestion = () => {\r\n    setShowAnswers(false);\r\n    setCurrentIndex(currentIndex + 1);\r\n  };\r\n\r\n  return questions.length > 0 ? (\r\n    <div className=\"container\">\r\n      {currentIndex >= questions.length ? (\r\n        <h1 className=\"text-3xl text-white font-bold\">\r\n          Game ended, your score was: {score}\r\n        </h1>\r\n      ) : (\r\n        <Questionaire\r\n          data={questions[currentIndex]}\r\n          showAnswers={showAnswers}\r\n          handleNextQuestion={handleNextQuestion}\r\n          handleAnswer={handleAnswer}\r\n        />\r\n      )}\r\n    </div>\r\n  ) : (\r\n    <h2 className=\"text-2xl text-white font-bold\">Loading...</h2>\r\n  );\r\n};\r\nexport default GameLogic;\r\n","import React, { useState, useContext } from \"react\";\r\nimport GameLogic from \"./GameLogic\";\r\nimport { GameContext } from \"./GameContext\";\r\n\r\nconst GameForm = () => {\r\n  const [numberOfQuestions, setNumberOfQuestions] = useState(\"10\");\r\n  const [category, setCategory] = useState(\"18\");\r\n  const [dificulty, setDificulty] = useState(\"easy\");\r\n  const [isCompleted, setCompleted] = useState(false);\r\n  const [url, setUrl] = useContext(GameContext);\r\n\r\n  const updateNumberOfQuestions = (e) => {\r\n    setNumberOfQuestions(e.target.value);\r\n  };\r\n  const updateCategory = (e) => {\r\n    setCategory(e.target.value);\r\n    //console.log('category updated')\r\n  };\r\n  const updateDificulty = (e) => {\r\n    setDificulty(e.target.value);\r\n    //console.log('dificulty updated')\r\n  };\r\n  const updateGameReady = (e) => {\r\n    e.preventDefault();\r\n    setCompleted(true);\r\n    setUrl({\r\n      url: `https://opentdb.com/api.php?amount=${numberOfQuestions}&category=${category}&difficulty=${dificulty}&type=multiple`,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col justify-center\">\r\n      <div className=\" bg-white text-purple-800 rounded-lg shadow-md text-2xl m-6 p-10 justify-center align-center\">\r\n        <h1 className=\"flex justify-center text-3xl\">Welcome to my trivia quiz</h1>\r\n        <br />\r\n      {/* </div>\r\n      <div className=\"flex bg-white text-purple-800 p-10  m-6 rounded-lg shadow-md text-xl min-w-false justify-center\"> */}\r\n        <h2 className=\"text-1xl mt-0 flex justify-center\">\r\n          Pick a category and a difficulty and let's find out how smart you are. \r\n        </h2>\r\n        <h2 className=\"text-1xl text-red-900 mt-0 flex justify-center\">Note that you need to hit the \"Save options\" button before you start the game !!! </h2>\r\n        \r\n      </div>\r\n      <div className=\"flex bg-white text-purple-800 p-10  m-6 rounded-lg shadow-md text-2xl min-w-false justify-center \">\r\n        <form className=\"space-x-6\">\r\n          <label for=\"NumberOfQuestions\">Number of Questions: </label>\r\n          <input className=\"\"\r\n            type=\"text\"\r\n            id=\"NumberOfQuestions\"\r\n            value={numberOfQuestions}\r\n            name=\"NumberOfQuestions\"\r\n            onChange={updateNumberOfQuestions}\r\n          />\r\n\r\n          <label for=\"category\">Choose a category: </label>\r\n          <select\r\n            id=\"category\"\r\n            name=\"category\"\r\n            value={category}\r\n            onChange={updateCategory}\r\n          >\r\n            <option value=\"18\">Computers and science</option>\r\n            <option value=\"17\">Science and nature</option>\r\n            <option value=\"27\">Animals</option>\r\n            <option value=\"28\">Cars</option>\r\n          </select>\r\n          <label for=\"dificulty\">Choose a dificulty: </label>\r\n          <select\r\n            id=\"dificulty\"\r\n            name=\"dificulty\"\r\n            value={dificulty}\r\n            onChange={updateDificulty}\r\n          >\r\n            <option value=\"easy\">Easy</option>\r\n            <option value=\"medium\">Medium</option>\r\n            <option value=\"hard\">Hard</option>\r\n          </select>\r\n\r\n          <button onClick={updateGameReady}>Save options</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n// export const category={category};\r\n// export const NumberOfQuestions={NumberOfQuestions};\r\nexport default GameForm;\r\n","import React, { useState, useEffect, Component } from \"react\";\nimport * as imports from \"./components/index\";\nimport { GameProvider } from \"./components/GameContext\";\n\n//const categorie='18';\n//const API_URL = `https://opentdb.com/api.php?amount=10&category=${categorie}&difficulty=easy&type=multiple`;\n\nclass App extends Component {\n  state = {\n    start: true,\n  };\n  render() {\n    const buttonText = this.state.start ? \"Start The game\" : \"Go to main menu\";\n    const mainSwitch = this.state.start ? (\n      <imports.GameForm />\n    ) : (\n      <imports.GameLogic />\n    );\n    return (\n      <GameProvider>\n        {mainSwitch}\n        <button\n          className=\"flex bg-red-200 text-purple-800 p-10 mt-6 rounded-lg shadow-md text-2xl min-w-full justify-center\"\n          onClick={() => {\n            this.setState({ start: !this.state.start });\n          }}\n        >\n          {buttonText}\n        </button>\n\n        {/* <imports.GameForm />  */}\n        {/* <imports.GameLogic /> */}\n      </GameProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}